@startuml diagram
!include ../style/commons.style

package com.affinitynow.app {
    package model {
        class User {
            + id: long
            + pseudo: string
            + connaissances: Map<String, Connaissance>
            + User(nom: string)
            + getPseudo(): string
            + setPseudo(): void
            + getTopic(): string
            + setTopic(): void
            + getConnaissance(): Map<String, Connaissance>
            + equals(user: User): boolean
            + hashcode(): integer
            + toString(): string
        }

        class Topic {
            + id: long
            + nom: string
            + this(nom: string)
            + getNom(): string
            + setNom(): void
        }

        class Connaissance {
            + topic: Topic
            + niveau: Niveau
            + topic(): Topic
            + niveau(topic: Topic): Optional<Niveau>
        }

        enum Niveau {
            Un, Deux, Trois, Quatre, Cinq
        }
    }

    package user {
        package controler {
            class UserControler {
                + User: User
                + createNewUser(): User , POST/User
                + removeTopicById(id: long): User , DELETE/User
                + addTopicsForUserById(id: long, topics: List<Topics>): void , POST/User/{id}/topics
                + getUserMatchingListById(id: long) , GET/User/{id}/match
            }
        }

        package service {
            class UserService {
                creerConnaissance(topic: Topic, niveau: Niveau, user: User): void
                connaissances(user: User): Stream<Connaissance>
                connait(topic: Topic, user:User): boolean 
            }
            
            interface Matching {
                + match(user1: User, user2: User): MatchResult
            }

            class ScoreMatching implements Matching {
                + match(user1: User, user2: User): MatchResult
            }

            interface MatchResult{
                + isSucess(): boolean
            }

            class ClassicMatchResult implements MatchResult, Comparable{
                 + isSucess(): boolean
            }
        }

        package dto {
            class UserDto {}
        }

        package repository {
            class UserRepository {}
        }
    }
}

UserService *--> "1" Matching
UserControler --> UserService: "uses"
UserService --> UserRepository: "uses"
UserRepository --> User: "uses"
Connaissance *--> "1" Topic
Connaissance *--> "1" Niveau
User *--> "*" Connaissance: "connaissance"
Matching --> MatchResult: "uses"
@enduml